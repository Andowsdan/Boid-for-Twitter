package com.handlerexploit.prime;

import com.handlerexploit.prime.ImageManager.Request;

import android.content.Context;
import android.graphics.Bitmap;
import android.util.AttributeSet;
import android.widget.ImageView;

/**
 * <h3>Usage Example</h3>
 * 
 * <pre>
 * String imageURL = &quot;http://example.com/image.png&quot;;
 * RemoteImageView remoteImageView = (RemoteImageView) findViewById(R.id.icon);
 * remoteImageView.setImageURL(imageURL);
 * </pre>
 * 
 * <div class="special reference"> <b>Development Notes:</b></br> This class is
 * thread safe and will work fluidly with the ViewHolder optimization pattern.
 * An example can be found <a href=
 * "https://github.com/DHuckaby/Prime/blob/master/examples/src/com/handlerexploit/prime/example/adapters/LazyImageAdapter.java"
 * >here</a>.</div>
 * 
 * <br/>
 * <br/>
 * See https://github.com/DHuckaby/Prime
 * 
 * @author Daniel Huckaby
 */
public class RemoteImageView extends ImageView
{

	private ImageManager mImageManager;

	private String mImageURL;

	public RemoteImageView(Context context)
	{
		super(context);
		setup(context, null, 0);
	}

	public RemoteImageView(Context context, AttributeSet attrs)
	{
		super(context, attrs);
		setup(context, attrs, 0);
	}

	public RemoteImageView(Context context, AttributeSet attrs, int defStyle)
	{
		super(context, attrs, defStyle);
		setup(context, attrs, defStyle);
	}

	private void setup(Context context, AttributeSet attrs, int defStyle)
	{
		mImageManager = ImageManager.getInstance(context);
	}

	/**
	 * Sets the content of this ImageView to the specified URL.
	 * 
	 * @param source
	 *            The URL of a remote image
	 */
	public void setImageURL(String source)
	{
		if (source != null)
		{
			mImageURL = source;
			mImageManager.get(mRequest);
		}
	}

	private Request mRequest = new Request()
	{

		@Override
		public void onImageReceived(String source, Bitmap bitmap)
		{
			if (mImageURL != null && mImageURL.equals(source) && bitmap != null)
			{
				setImageBitmap(bitmap);
			}
		}

		@Override
		public String getSource()
		{
			return mImageURL;
		}
	};
}